{"version":3,"sources":["App.tsx","index.tsx"],"names":["pokemons","id","name","doublePokemons","shuffle","App","useState","opened","setOpened","matched","setMatched","moves","setMoves","flipCard","index","length","useEffect","firstPokemon","secondPokemon","setTimeout","className","onClick","map","pokemon","isFlipped","includes","key","PokemonCard","props","disabled","src","alt","width","ReactDOM","render","document","getElementById"],"mappings":"uNAYMA,G,MAA+B,CACnC,CAACC,GAAI,EAAGC,KAAM,aACd,CAACD,GAAI,GAAIC,KAAM,YACf,CAACD,GAAI,GAAIC,KAAM,UACf,CAACD,GAAI,IAAKC,KAAM,aAChB,CAACD,GAAI,IAAKC,KAAM,SAChB,CAACD,GAAI,IAAKC,KAAM,WAGdC,EAAqCC,IAAQ,GAAD,OAAKJ,EAAaA,IAEnD,SAASK,IAAoB,IAAD,EAEbC,mBAAmB,IAFN,mBAElCC,EAFkC,KAE1BC,EAF0B,OAGXF,mBAAmB,IAHR,mBAGlCG,EAHkC,KAGzBC,EAHyB,OAIfJ,mBAAS,GAJM,mBAIlCK,EAJkC,KAI3BC,EAJ2B,KAMnCC,EAAW,SAACC,GACZL,EAAQM,SAAWf,EAASe,QAAQH,GAAS,SAAAD,GAAK,OAAIA,EAAQ,KAClEH,GAAU,SAAAD,GAAM,4BAAQA,GAAR,CAAgBO,QAgClC,OAtBAE,qBAAU,WACR,KAAIT,EAAOQ,OAAS,GAApB,CAEA,IAAME,EAA4Bd,EAAeI,EAAO,IAClDW,EAA6Bf,EAAeI,EAAO,IAErDU,EAAaf,OAASgB,EAAchB,MACtCQ,GAAW,SAAAD,GAAO,4BAAQA,GAAR,CAAiBS,EAAcjB,WAElD,CAACM,IAGJS,qBAAU,WACc,IAAlBT,EAAOQ,QAAcI,YAAW,kBAAMX,EAAU,MAAK,OAExD,CAACD,IAQA,yBAAKa,UAAU,OACZX,EAAQM,QAAUf,EAASe,OACrB,yBAAKK,UAAU,eAChB,4BACIA,UAAU,UACVC,QAAS,kBAnCvBX,EAAW,IACXF,EAAU,IACVI,EAAS,QACTT,EAAiBC,IAAQ,GAAD,OAAKJ,EAAaA,OA8BhC,gBAOC,wBAAIoB,UAAU,QAAd,cAEP,2BAAIT,EAAM,0CACV,yBAAKS,UAAU,SACZjB,EAAemB,KAAI,SAACC,EAAST,GACxB,IAAIU,GAAY,EAKhB,OAHIjB,EAAOkB,SAASX,KAAQU,GAAY,GACpCf,EAAQgB,SAASF,EAAQtB,MAAKuB,GAAY,GAG1C,kBAAC,EAAD,CACIE,IAAKZ,EACLS,QAASA,EACTC,UAAWA,EACXX,SAAUA,EACVC,MAAOA,SAU/B,IAAMa,EAAc,SAACC,GAKD,IAEXL,EAAuCK,EAAvCL,QAASC,EAA8BI,EAA9BJ,UAAWX,EAAmBe,EAAnBf,SAAUC,EAASc,EAATd,MACrC,OACI,4BACIO,QAAS,kBAAMR,EAASC,IACxBM,UAAS,uBAAkBI,EAAY,UAAY,IACnDK,SAAUL,GAEZ,yBAAKJ,UAAU,SACb,yBAAKA,UAAU,SACb,yBACIU,IAAG,wDAAmDP,EAAQtB,GAA3D,QACH8B,IAAKR,EAAQrB,KACb8B,MAAM,SAGZ,yBAAKZ,UAAU,QAAf,QCtHVa,IAASC,OACP,gBAAC,aAAD,KACE,gBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.be5219c0.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\n\n// image for the pokemon\n// https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png\n\ntype PokemonType = {\n  id: number\n  name: string\n}\n\nconst pokemons: Array<PokemonType> = [\n  {id: 4, name: 'charizard'},\n  {id: 10, name: 'caterpie'},\n  {id: 77, name: 'ponyta'},\n  {id: 108, name: 'lickitung'},\n  {id: 132, name: 'ditto'},\n  {id: 133, name: 'eevee'},\n];\n\nlet doublePokemons: Array<PokemonType> = shuffle([...pokemons, ...pokemons]);\n\nexport default function App(): JSX.Element {\n\n  const [opened, setOpened] = useState<number[]>([]);\n  const [matched, setMatched] = useState<number[]>([]);\n  const [moves, setMoves] = useState(0);\n\n  const flipCard = (index: number): void => {\n    if (matched.length !== pokemons.length) setMoves(moves => moves + 1);\n    setOpened(opened => [...opened, index]);\n  }\n  const restart = () => {\n    setMatched([]);\n    setOpened([]);\n    setMoves(0);\n    doublePokemons = shuffle([...pokemons, ...pokemons])\n  }\n\n  // check if is a match\n  useEffect(() => {\n    if (opened.length < 2) return;\n\n    const firstPokemon: PokemonType = doublePokemons[opened[0]];\n    const secondPokemon: PokemonType = doublePokemons[opened[1]];\n\n    if (firstPokemon.name === secondPokemon.name) {\n      setMatched(matched => [...matched, secondPokemon.id])\n    }\n  }, [opened])\n\n  // clear cards if no match\n  useEffect(() => {\n    if (opened.length === 2) setTimeout(() => setOpened([]), 800);\n\n  }, [opened])\n\n  // // check if is a winner\n  // useEffect(() => {\n  //   if(matched.length === pokemons.length) alert('You won!');\n  // },[matched])\n\n  return (\n      <div className=\"app\">\n        {matched.length >= pokemons.length\n            ? (<div className=\"btn-restart\">\n              <button\n                  className=\"restart\"\n                  onClick={() => restart()}\n              >\n                Play again!\n              </button>\n            </div>)\n            : (<h1 className=\"play\">Lets play!</h1>)\n        }\n        <p>{moves}<strong>moves</strong></p>\n        <div className=\"cards\">\n          {doublePokemons.map((pokemon, index) => {\n                let isFlipped = false;\n\n                if (opened.includes(index)) isFlipped = true;\n                if (matched.includes(pokemon.id)) isFlipped = true;\n\n                return (\n                    <PokemonCard\n                        key={index}\n                        pokemon={pokemon}\n                        isFlipped={isFlipped}\n                        flipCard={flipCard}\n                        index={index}\n                    />\n                )\n              }\n          )}\n        </div>\n      </div>\n  );\n}\n\nconst PokemonCard = (props: {\n  pokemon: PokemonType;\n  isFlipped: boolean;\n  flipCard: Function;\n  index: number;\n}): JSX.Element => {\n\n  const {pokemon, isFlipped, flipCard, index} = props;\n  return (\n      <button\n          onClick={() => flipCard(index)}\n          className={`pokemon-card ${isFlipped ? 'flipped' : ''}`}\n          disabled={isFlipped}\n      >\n        <div className=\"inner\">\n          <div className=\"front\">\n            <img\n                src={`https://pokeres.bastionbot.org/images/pokemon/${pokemon.id}.png`}\n                alt={pokemon.name}\n                width=\"100\"\n            />\n          </div>\n          <div className=\"back\">?</div>\n        </div>\n      </button>\n\n  )\n}\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}